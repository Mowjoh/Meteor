//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Meteor
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MeteorDatabase : DbContext
    {
        public MeteorDatabase()
            : base("name=MeteorDatabase")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Character> Characters { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<Nameplate> Nameplates { get; set; }
        public virtual DbSet<Packer> Packers { get; set; }
        public virtual DbSet<SkinLibrary> SkinLibraries { get; set; }
        public virtual DbSet<Skin> Skins { get; set; }
        public virtual DbSet<Workspace> Workspaces { get; set; }
        public virtual DbSet<CharacterItem> CharacterItems { get; set; }
        public virtual DbSet<ConfigurationFile> ConfigurationFiles { get; set; }
    
        public virtual int ClearWorkspace(Nullable<int> workspace_id)
        {
            var workspace_idParameter = workspace_id.HasValue ?
                new ObjectParameter("workspace_id", workspace_id) :
                new ObjectParameter("workspace_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearWorkspace", workspace_idParameter);
        }
    
        public virtual int CopyWorkspace(Nullable<int> sourceId, Nullable<int> destinationId)
        {
            var sourceIdParameter = sourceId.HasValue ?
                new ObjectParameter("SourceId", sourceId) :
                new ObjectParameter("SourceId", typeof(int));
    
            var destinationIdParameter = destinationId.HasValue ?
                new ObjectParameter("DestinationId", destinationId) :
                new ObjectParameter("DestinationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CopyWorkspace", sourceIdParameter, destinationIdParameter);
        }
    
        public virtual int ResetCharacters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetCharacters");
        }
    
        public virtual int ResetConfiguration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetConfiguration");
        }
    
        public virtual int ResetEverything()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetEverything");
        }
    
        public virtual int ResetNameplates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetNameplates");
        }
    
        public virtual int ResetPacker()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetPacker");
        }
    
        public virtual int ResetSkinLibrary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetSkinLibrary");
        }
    
        public virtual int ResetSkins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetSkins");
        }
    
        public virtual int ResetWorkspaces()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetWorkspaces");
        }
    
        public virtual int Procedure(string date, Nullable<int> slot)
        {
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var slotParameter = slot.HasValue ?
                new ObjectParameter("slot", slot) :
                new ObjectParameter("slot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Procedure", dateParameter, slotParameter);
        }
    
        public virtual int AddWorkspace(string date, Nullable<int> slot)
        {
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var slotParameter = slot.HasValue ?
                new ObjectParameter("slot", slot) :
                new ObjectParameter("slot", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddWorkspace", dateParameter, slotParameter);
        }
    }
}
